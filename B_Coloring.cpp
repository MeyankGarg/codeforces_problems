

// // ⠈⠀⠈⠀⠀⠀⠀⠀⠠⠀⠀⠀⠀⠄⡀⠀⠀⠀⠄⠀⠀⠀⠠⠀⠀⠀⠀⠀⠄⠀⠀⠀⠠⠀⠀⠀⠀⠄⠀⠀⠀⠀⠄⠀⠀⠀⠠⠀⠀⠀⠀⠀⠄⠀⠀⠀⠄⠠⠀⠀⠀⠠⠀⠀⠀⠀⠄⠀⠀⠀⠀⠄⠀⠀⠀⠀⠄⠀⠀⠀⠀⠄⠀⠀⠀⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠀⠀⠀⠀⡄
// // ⠄⠂⡀⠁⠈⠀⡀⠀⠁⠠⢀⠀⠀⠀⠀⢀⠠⠀⠈⠄⠠⠀⠀⠁⠠⢀⠂⠈⠀⠀⠂⠀⠀⠀⠐⡀⠈⠀⠡⠀⠄⠀⠀⠁⠐⢀⠀⠁⠀⢂⠀⠀⠀⠄⢂⠀⠀⠁⠀⠄⠂⠀⠀⠄⡀⠈⠀⠐⢀⠂⠀⠈⠀⠐⡀⠈⠀⠁⠐⠀⠀⠀⠁⠠⢀⠀⠁⠀⠠⠈⠈⠀⠀⠂⡀⠁⠀⠀⠀⠂⠄
// // ⠃⠀⢀⠀⢀⠀⠀⠀⢀⠀⠀⠀⠀⡀⠄⠀⠀⠀⡀⠀⠐⠀⢀⠀⠁⠀⢀⠀⢀⠀⠂⠁⢀⠠⠀⠀⠀⠀⡀⠀⠐⠀⡀⠀⠐⠀⠀⠀⠀⠀⠀⢀⠀⠀⠂⠀⠀⢀⠀⠀⠂⢀⠀⠀⠀⠀⠀⠈⠀⠀⠀⡀⠄⠐⠀⠀⠀⡀⠀⠈⠀⡀⠄⠐⠀⠀⠀⠁⠀⢀⠀⠀⠀⠂⠀⢀⠠⠀⠈⠀⠀
// // ⢂⠀⡀⠘⠀⠀⠀⠀⠀⢀⠀⠀⠀⠀⢀⠠⢀⠀⠀⠀⢀⠐⠀⠂⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⢀⠀⠂⠁⠀⠀⠀⠀⡀⠀⠈⠀⠀⠀⠀⡀⠀⠀⠄⠀⡀⠁⠂⠀⠀⠀⠀⠠⠀⠀⠀⠁⠀⠀⠀⠀⠀⠀⠀⢀⠀⠁⡀⠀⠀⠀⠐⠀⠀⠀⠀⠈⠀⠀⠈⠀
// // ⠄⠐⢀⠀⠀⠁⠂⠀⠀⣀⣤⣶⣶⣶⣦⣤⣈⠀⠀⠀⠂⠀⠀⢀⠁⠌⢀⠀⠀⠂⠁⠄⠀⠀⠁⠁⡀⠀⠈⠄⠁⠀⡀⠀⠡⠀⠀⡀⠠⠁⠄⠀⠀⠠⠁⢂⠀⠀⠄⠁⠀⠀⠀⠈⠀⠀⠀⠐⠈⠐⠀⡀⠀⠈⠀⡀⢀⠈⠐⠈⠀⠀⡀⠁⢀⣠⣤⣶⣶⣦⣤⣀⠠⠁⠂⠀⢀⠈⠄⠁⠀
// // ⠀⠀⢀⠈⡐⠀⠀⣀⣾⡿⠋⠁⠀⠀⠈⠉⠻⣷⡄⠀⠀⠠⢈⠀⠀⠀⠠⢀⢂⠀⠀⠀⡈⠠⠀⠀⠄⡈⠀⠀⠀⠄⡀⡁⠀⠀⠐⠀⠀⠀⠀⡀⠂⠀⠀⠀⠀⠌⠀⠀⠀⡈⠀⠀⠀⢁⠈⡀⠀⠀⡀⢀⠁⠀⠀⠄⢂⠀⠀⠀⢀⠂⢀⣴⡿⠋⠉⠀⠀⠈⠉⠻⣷⣄⠀⢂⢈⠀⠀⠐⠀
// // ⠅⠈⠄⠀⠀⠀⢠⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⡄⠄⠀⠀⠀⠁⠄⠀⠀⠀⠀⠄⡁⠀⠀⠀⠂⠀⠀⢀⠐⠠⠀⠀⢀⣀⣬⣤⣤⣤⣶⣴⣤⣤⣤⣤⣄⣀⣀⠂⠄⠁⠀⠀⠁⠌⠀⠀⢀⠈⠄⠀⠀⠈⠠⠁⠀⠀⠠⠈⠄⠀⠀⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⡆⠀⠀⠀⠠⠀⠀
// // ⠁⠈⠀⠠⢀⣈⣸⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣹⡏⠀⠐⢀⠀⠈⠀⠡⠀⠠⠀⠀⠀⢀⠀⠁⠈⡀⠄⣀⣬⣴⣾⠿⠿⢛⠫⠍⠭⣉⠒⡌⢢⠉⡍⢫⠙⣛⠻⠿⢷⣶⣤⣀⠈⠀⠀⠀⠀⠈⠀⠀⠄⠂⠁⠈⠀⢀⠀⠈⠀⢀⢸⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣹⣗⣀⣀⠈⠀⢀⠀
// // ⠀⢀⣰⣾⠿⠛⠋⠙⠂⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⠇⠀⠀⠂⠐⠀⠀⠀⠀⠂⠀⡀⠀⠂⠀⠀⣠⣴⡿⢟⠫⡑⢢⠉⢆⢃⠎⡙⢌⡑⡋⢔⠡⢊⠔⡡⢃⠆⢣⠜⡂⢍⡙⠻⢿⣶⣄⡐⠀⠀⠀⠀⠂⠀⢀⠀⠐⠀⠀⠀⠀⠀⠈⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠋⠉⠛⠻⢷⣦⡀⠀
// // ⠀⣾⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⣿⣏⠀⠈⢀⠀⠀⠀⠁⢂⠀⠀⠀⠀⠁⢀⣴⡿⢟⠩⡐⢡⢂⡑⢢⢉⠲⡌⢆⠱⡈⠔⡩⠌⡌⡡⢎⡱⢡⠊⡔⢨⠘⠤⣈⢑⠢⢌⠛⣿⣶⣄⠈⠀⠀⡀⠀⠀⡀⠀⠈⠀⠈⠀⠀⣘⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⡄
// // ⢸⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⢿⣦⡀⠐⠀⢀⠀⠠⠐⠈⠀⢠⣼⡿⢋⠜⡠⢃⣼⣶⡆⠜⡠⡉⢖⡩⢎⡒⡅⢣⠐⡡⢂⠱⡌⢲⢡⠓⣌⠡⢊⡒⠥⢊⠜⡠⢃⠔⡨⢻⣷⣄⠁⠀⠀⣀⠠⠁⠂⠀⠀⣤⣾⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣷
// // ⢸⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣦⡀⠂⢀⠀⠀⢀⣼⡿⢋⠄⢣⢘⣴⣿⡿⠫⣬⣿⣶⠡⢂⠱⣈⠜⡼⡡⢎⠱⣨⠱⢌⠣⢎⡹⢄⢣⠃⣌⣦⡑⢌⠰⢿⣿⣦⡡⢊⠿⣷⣄⠀⠀⠀⠀⢀⣰⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⡟
// // ⠀⢻⣷⡄⠀⠀⠀⠀⠀⠀⣠⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣦⣀⠰⣠⣿⠏⡜⢠⠚⣴⣿⡿⢋⢔⣽⣿⢟⠡⢃⣾⣷⡌⠢⣝⠳⣌⠳⡄⢋⡌⠳⢌⡓⢮⡑⢎⠹⣿⣷⣌⠆⡡⢛⢿⣿⣆⢌⡙⣿⣦⠀⢀⣴⡾⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣆⠀⠀⠀⠀⠀⠀⢀⣴⡿⠁
// // ⠀⠈⠻⢷⣦⣄⣀⣀⣠⣴⡿⢻⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⢿⣦⣿⢫⠐⡡⢊⣴⣿⠿⡁⢎⣾⣿⠟⡈⢦⣾⣿⠟⡡⢂⡙⢆⡙⢢⠑⣊⠑⢢⠘⡱⢈⠓⡜⢠⠙⣿⣿⣔⠡⢊⠜⢿⣿⣎⢡⠙⣿⣦⣾⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⡿⠿⣶⣤⣀⣀⣀⣤⣾⠟⠁⠀
// // ⠀⠄⠀⠀⠈⠉⠿⠛⠉⠉⠀⠀⠉⠻⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⢃⠆⡑⢢⠡⢌⠋⡔⢡⠚⡛⠧⡘⠰⡙⢟⠱⣈⠒⡡⠘⠤⡘⢄⠣⢄⠋⢆⠓⡐⢣⠘⡄⢣⠘⡌⣛⠋⢆⠱⡈⢆⡛⣛⠢⡉⠜⢿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣶⡿⠋⢀⠀⠈⠉⠙⠟⠋⢉⠀⠠⢄⠀
// // ⡀⠀⢀⠡⠈⠀⠀⠀⠐⢀⠀⠀⠀⠀⠈⠻⣷⣦⡀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⣠⣾⠟⠋⠀⠀⠸⠀⠀⠀⠀⠀⠐⠸⠀⠀⠘⠀
// // ⡄⠁⠂⠀⠀⠀⠂⠀⠀⠠⠐⠀⠀⠀⢀⠠⠀⠙⢿⣦⡀⠀⠀⠀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⣠⣾⠟⠁⠀⠀⠆⠀⠀⠀⠀⠄⠂⡁⠀⠀⠀⠐⠀⠀
// // ⠄⠀⢈⠠⠁⠀⠀⠀⠡⠀⠀⠀⠁⠌⠀⠀⠀⠀⠀⠙⢿⣦⡀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⢀⣴⣾⠟⡁⠀⠀⠠⠀⠀⠀⠈⠠⠈⠀⠀⠀⠄⢨⠀⠀⠐⠀
// // ⢂⠄⠂⠀⠈⠀⠀⠀⠁⢠⠀⠐⠀⠈⠀⠀⠰⠀⠁⠀⠀⠙⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠄⠀⠀⠀⠈⠀⡀⠄⠈⠀⠀⠀⡀⠀
// // ⠂⠈⢀⠀⢀⠂⠁⡀⠀⣴⣾⠿⠿⡿⠿⡿⢿⠿⠿⡿⢿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⡿⢿⠿⡿⠿⢿⠿⡿⢷⣦⡐⠀⠂⠀⢀⠀⠂⠀⠀
// // ⡀⠀⠠⠈⠀⠀⠀⠄⢸⣿⠂⣍⢢⢁⠳⡈⠆⠬⡑⢄⠣⢌⡩⣘⠩⡘⢄⠣⡘⡄⢣⠘⡌⠥⢋⠔⡡⢊⠔⣡⠊⡔⢩⡘⢅⠣⡘⢄⠣⠜⡠⢃⡌⠣⢍⠒⡡⢊⠔⡡⢊⡔⠡⡍⢎⠱⡈⢆⠱⡈⢆⠱⣈⠥⣉⠆⡩⢌⠡⠍⡌⢱⢈⠆⠳⡈⠕⡈⢆⠱⡈⢽⣿⠀⠀⠁⠈⠀⠀⠈⠀
// // ⠄⠁⠂⠀⠀⠈⠀⡀⠈⢿⣷⣤⣦⣬⣦⣵⣬⣦⣵⣬⣶⣤⣶⣤⣧⣼⣤⣧⣴⣬⣦⣵⣬⣦⣥⣮⣴⣥⣮⣤⣵⣬⣦⣼⣤⣧⣼⣤⣧⣼⣤⣧⣬⣵⣬⣦⣵⣬⣦⣵⣦⣬⣵⣴⣬⣦⣵⣬⣦⣵⣬⣶⣤⣶⣤⣮⣴⣬⣦⣵⣬⣦⣬⣬⣵⣬⣼⣴⣬⣦⣵⡿⠋⠀⠂⠀⠀⠀⠂⠁⠀
// // ⠂⠀⠈⡐⠈⠀⠀⠀⠄⠀⠀⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠩⠉⣿⡏⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⣉⣉⣉⡉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⣉⣉⣉⡉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⢉⣿⠏⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⢁⠀⠀⠀⠀⠂⢘⠀⠀⠐⠀
// // ⠅⠂⠄⠀⠀⠀⠄⠀⠀⠠⠀⠄⠀⠀⠀⠠⢰⠀⠀⠀⠄⠀⠀⢹⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣾⣿⣿⣿⣿⣿⣷⣦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣶⣿⣿⣿⣿⣿⣿⣶⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡿⠂⠠⠀⠀⠀⠄⢀⠀⠀⠂⠀⠄⠀⠀⠀⠌⠀⠀⠀⠀⠠⠀⠀
// // ⠁⠈⢀⠠⠐⠀⠀⠄⠀⡀⠀⠀⠂⡀⠌⠀⠀⠀⡀⠀⠈⠀⢀⠸⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⡀⠀⠀⠀⠀⠀⠀⠀⢰⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡄⠀⠀⠀⠀⠀⠀⢀⣿⡇⠀⠈⠀⡀⠂⠈⠀⢀⠀⠀⠈⠀⠠⠐⠀⠀⠁⢀⠰⠀⠀⠠⠀
// // ⠄⡀⠄⠀⠂⠀⡀⠀⠁⠀⢀⠠⠀⠐⠀⠀⢠⠐⠀⠀⠀⠀⠂⠀⠸⣿⡄⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⣼⡟⠂⠀⠀⠐⠀⠁⢀⠀⠀⠂⡀⠀⠈⠐⠐⠀⠀⠌⠀⠐⠀⠀⠄⠀
// // ⠐⠠⠀⢀⠀⠂⠄⠀⠀⠈⠠⠀⠀⠀⠠⠡⠀⠀⠀⠂⠡⢀⠀⠀⠀⠹⣷⡀⠀⠀⠀⠀⠀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⣼⡿⠀⠀⠌⠈⠀⠀⠠⠀⠐⠀⠀⠀⠌⠀⢀⠀⠠⠁⠂⠀⢀⠀⠡⠀⠀
// // ⡁⠀⠐⠠⠐⠀⠀⠀⠈⠀⠀⠀⠈⡀⠁⠀⠀⠀⡁⠀⠀⠀⡐⠀⠀⠀⠹⣿⣄⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀⢀⣼⡟⠁⠀⠀⠀⠀⠀⡁⠂⠀⠀⢈⠀⠀⠀⠈⠀⡀⠀⠀⠐⠈⠠⠀⠀⠐⠀
// // ⡁⠂⠄⠀⠀⠀⠄⠀⠀⠐⠠⠀⠀⠀⢀⠠⠘⠀⠀⠀⢂⠀⠀⠀⠂⠀⠀⠙⢿⣦⡀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠁⠀⠀⠀⠀⠀⠀⠀⠘⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠃⠀⠀⣠⣾⠟⠀⠀⠀⠐⠀⢂⠀⠀⠀⠐⠀⠀⠀⠁⠀⠂⠀⠀⠀⠂⠄⠀⠀⠀⠀⠂⠀
// // ⠀⠀⠐⢈⠐⠀⠀⠀⠄⠁⠀⠀⠀⠡⠀⠀⠀⠀⠄⠀⠀⠀⠠⠁⠀⠀⠰⠀⠈⠻⣷⣄⠀⠀⠀⠈⠛⢿⣿⣿⣿⣿⣿⡿⠟⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠿⣿⣿⣿⣿⣿⣿⠿⠋⠀⠀⢀⣴⡿⠁⠀⠀⠄⠈⡀⠀⠀⠀⠄⠂⠀⠀⠁⠄⠀⠀⠠⠀⠄⠀⠀⠠⢀⠰⠀⠀⠐⠀
// // ⢂⠐⡈⠀⠀⡀⠄⠀⠀⠁⢀⠂⠁⠀⠁⠠⢐⠀⠈⠀⠐⠀⠁⠀⠄⠠⠈⠀⠀⠀⠘⠿⣷⣄⠀⠀⠀⠀⠀⠈⠉⠁⠀⠀⠀⠀⠀⠀⣠⣤⣶⣤⣄⡀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠀⠀⠀⠀⢀⣴⡿⠋⠀⠀⢂⠀⠀⠀⠐⠀⠠⠀⠀⠁⠐⢀⠈⠀⠄⡀⠀⠈⠀⠀⠂⠄⠀⠀⢀⠀⠄⠀
// // ⠂⠐⠀⡀⠠⠀⠂⠀⠠⠐⠀⠐⠀⡀⠌⠀⠀⠀⡀⠀⠁⢀⠠⠀⠂⠐⠀⠀⠀⠂⠀⠀⠈⠻⢿⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣾⠟⠋⠀⠀⠀⡄⠂⠀⢀⠀⠐⠈⠐⠀⠀⠄⠈⠀⠀⠠⠀⠐⠠⠀⠀⠂⠁⠂⢀⠠⠀⠂⢀⠀
// // ⡂⠀⠐⠠⠐⠀⠀⠠⠐⠀⠀⠀⠄⠀⠂⠀⢀⠠⠀⠀⠀⠀⠄⠁⡀⠀⠈⠄⠡⠀⠀⠀⢠⣴⡿⢫⣿⢿⣦⣤⣀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⣀⣠⣴⡿⢿⣟⠿⣶⣄⠀⠠⠁⠀⠀⠀⠠⠈⠄⠀⠀⠀⠁⠂⠀⠀⠡⠄⠀⠀⠠⠈⠄⠀⠀⠀⠂⠐⠀⠀⠀⠠
// // ⠆⠁⠂⠀⠀⠀⠂⠀⠀⠀⢈⠀⠀⠀⠀⠐⠈⠀⠀⠀⢈⠀⠀⠀⠀⡀⠀⠀⠀⠀⣢⣴⡿⠋⢠⣿⠏⠀⠈⠙⠛⠿⢷⣶⣤⣤⣄⣀⣀⣀⣀⣀⣀⣀⣀⣤⣤⣶⣶⠿⠟⠋⠉⠀⠘⣿⣆⠈⠻⣷⣄⡀⠀⠀⠂⠀⠀⠠⠐⠈⠀⠀⠀⢈⠀⠀⠀⠂⢀⠀⠀⠀⠀⡁⠂⠀⠀⠀⠠⠁⠀
// // ⠄⠀⠐⢈⠐⠀⠀⠀⠐⠀⠀⠀⠀⠂⠄⠀⠀⠀⡐⠀⠀⠀⠂⠄⠀⠀⢈⠀⣠⣾⠟⠉⠀⠀⣾⡏⠀⠀⠀⠀⠀⠀⣿⡇⠈⠉⠉⠛⠛⠛⣿⡟⠛⠛⠋⠉⠉⠘⣿⡄⠀⠀⠀⠀⠀⠘⣿⡄⠀⠈⠻⣿⣄⡀⠀⠄⠀⠂⠀⠀⠀⠂⡁⠀⠀⠐⡀⠀⠀⠀⠠⠀⠀⠀⠀⠄⠘⠀⠀⠠⠀
// // ⠐⠀⠂⠀⠀⡀⠆⠀⠀⠐⠀⠂⠀⠀⠠⠠⢐⠀⠀⠀⡐⠀⠀⠀⡀⠄⣠⣾⠟⠁⠀⠀⠀⢸⣿⢿⣦⣄⡀⠀⠀⠀⣿⡷⠀⠀⠀⠀⠀⠀⣿⡇⠀⠀⠀⠀⠀⠀⣿⡇⠀⠀⠀⣀⣴⡾⢿⣷⠀⠀⠀⠈⠙⢿⣦⡀⠀⠠⠀⠐⠀⠀⠀⠠⠐⠀⠀⠂⠄⡀⠀⠀⢀⠂⠄⠀⢀⠠⠀⠄⠀
// // ⠁⠀⠁⠄⠂⠀⠀⠀⡀⠂⠈⠀⠂⡐⡀⠀⠀⠀⠀⠀⠀⠠⠀⢀⣴⣾⠟⠁⠀⠀⠀⠀⠀⣿⡏⠀⠈⠙⠻⢷⣶⣴⣿⣄⣀⣀⡀⠀⠀⠀⣿⡇⠀⠀⣀⣀⣀⣀⣿⣧⣴⡾⠿⠛⠉⠀⠘⣿⡀⠀⠀⠀⠀⠀⠙⢿⣦⡀⠀⠈⠀⠀⡆⠀⠀⢀⠀⠁⠀⢀⠐⠀⠀⠀⠐⡀⢠⠀⠈⢀⠀
// // ⠄⡀⠌⠐⠈⠀⠀⠀⠐⠀⢀⠀⠀⣀⣡⣤⣤⣌⣀⠀⠀⢀⣴⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀⣿⡇⠀⠀⠀⠀⠀⠀⢸⣿⠙⠛⠛⠛⠻⠻⠟⣿⡿⠛⠟⠛⠛⠛⠛⢹⣿⠁⠀⠀⠀⠀⠀⠀⣿⡇⠀⠀⠀⠀⠀⠀⠀⠙⠿⣦⣄⠀⠁⢀⣠⣤⣤⣄⣀⠀⠀⠂⠐⠀⠀⠄⠐⠀⠀⠀⠀⠀
// // ⠅⠀⢂⠀⠀⠠⠁⠀⠀⠀⠀⣴⣿⠟⠋⠉⠉⠉⠛⢿⣶⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣷⣥⡀⠀⠀⠀⠀⣼⡏⠀⠀⠀⠀⠀⠀⠀⣿⡇⠀⠀⠀⠀⠀⠀⢘⣿⠀⠀⠀⠀⠀⣠⣾⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣷⣾⠟⠋⠉⠉⠉⠛⢿⣦⡀⠀⠀⠁⠂⠀⢀⠀⠈⠀⠀
// // ⠀⠀⠈⠐⠠⠀⠀⠀⠠⠀⣰⡿⠋⠀⠀⠀⠀⠀⠀⠈⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⡏⠻⣷⣤⣀⠀⠀⣿⡇⠀⠀⠀⠀⠀⠀⠀⣿⡇⠀⠀⠀⠀⠀⠀⠈⣿⡆⠀⢀⣠⣶⠿⠋⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠋⠀⠀⠀⠀⠀⠀⠈⢻⣷⡄⠀⠀⠀⠠⠘⠀⠀⠐⠀
// // ⢁⠂⠌⠀⠀⠀⠄⠀⠁⢰⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⡟⠁⣿⡇⠀⠀⠉⠛⠿⢷⣿⣧⣤⣤⣀⣀⣀⣀⣀⣿⣇⣀⣀⣀⣠⣤⣤⣤⣿⣷⠿⠛⠋⠁⠀⢸⣿⠈⠻⢿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⡇⠀⡀⠄⠀⠀⢀⠀⠄⠀
// // ⠀⠀⠠⢀⠠⠁⠀⠀⡀⢸⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣾⠟⠁⠀⠀⢻⣿⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠛⠛⠛⠛⠛⠛⠛⠛⠛⠋⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⣸⣿⠀⠀⠀⠹⢿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⡇⠀⠀⠀⡀⢠⠀⠈⢀⠀
// // ⠄⠠⠀⠂⠀⠀⠄⠁⠐⠀⢻⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⢿⣏⠁⠀⠀⡀⠀⠘⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠧⠀⠀⠁⠀⠀⢹⣿⠆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⡿⠁⠀⠠⠐⠀⠀⠀⠀⠄⠀
// // ⡁⠂⢁⠀⠀⠀⠂⠀⠀⠀⠀⠙⠿⣷⣤⣤⣤⡄⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⡧⠀⠁⠄⠀⠀⢹⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⡟⠈⠠⠁⠀⢀⢠⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⣤⣤⣤⣶⡿⠋⠀⠀⠀⠡⠄⠀⢀⠠⠈⠀⠀
// // ⠀⠀⢀⠘⡀⠀⠀⠁⡐⠀⠀⠀⢀⡀⠍⢩⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⠀⠀⢀⠐⢨⠀⠹⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⡿⠁⡀⠀⠀⢀⢂⢾⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣏⠉⠁⠀⢰⢀⢂⠀⠀⠀⡐⠠⠀⠀⠐⠀
// // ⠡⠈⠄⠀⠀⡀⠄⠀⠀⠀⠐⡀⠀⠀⠀⠀⢿⣧⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⠇⠀⠄⡀⠀⠀⠀⠀⠙⢿⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣾⠟⠀⠀⠐⠀⠠⠀⠀⠘⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⣠⣿⠃⠀⠂⠀⠀⠀⠀⠀⠄⠂⠀⠀⠀⠄⠂⠀
// // ⠁⠈⠀⠄⢀⠀⠀⠂⡀⠀⠀⠀⡀⠄⡀⠀⠀⠻⣷⣤⣀⠀⠀⢀⣀⣴⡿⠋⢀⠀⠀⠀⢀⠀⠀⠁⠄⠀⠉⠻⢷⣦⣄⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣴⣶⠿⠋⠀⠀⠀⡀⠀⠈⠀⠀⡀⠆⠈⠿⣷⣄⣀⠀⠀⣀⣠⣴⡿⠃⠀⡀⠀⠁⠠⢀⠀⠀⠈⢀⠠⠐⠀⠀⠐⠀
// // ⠂⠄⡀⠈⠀⠀⡀⠀⠐⠀⢀⠀⠀⠐⠀⠀⢠⠀⠈⠙⠛⠿⠿⠟⠛⠉⠀⠀⠀⠀⡀⠄⠂⠈⠀⡀⠀⠈⠀⢀⠀⠈⠉⠛⠻⠿⠿⠷⢶⣶⡶⣶⠶⠾⠿⠿⠟⠛⠋⠉⡄⠀⠀⠀⡀⠀⠐⠠⠀⡀⠀⠀⠀⠀⠀⠈⠙⠛⠿⠿⠛⠋⠁⠀⠀⠀⠀⠄⠀⠀⠀⠂⠀⡀⠀⠀⠈⠀⢀⠈⠀
// // ⠃⠀⠠⠠⢀⠀⠀⠀⠀⠌⠀⠀⠠⠠⠐⠈⠈⠀⠀⠀⠀⢀⠀⠀⠀⠈⠀⠠⠀⠀⠀⠠⠀⠄⠐⠀⠀⠀⠈⠀⠀⠀⠠⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠠⠀⠀⠁⠃⠀⠄⠀⠀⠀⠄⠐⠀⠀⠀⠄⠄⠈⠀⠀⠀⠈⠀⠈⠀⠄⡀⠀⠈⠀⠄⠂⠁⠀⠠⠀⠀⠀⠡⠀⠠⠀⠀⢀⠀
// // ⡁⢀⠠⠐⠀⠀⠀⠀⠈⠀⠀⢀⠠⠁⠄⠀⢀⠀⠡⠀⠀⠀⠈⠄⠀⠀⠈⠀⠡⠀⠀⡀⠈⠀⠀⠀⠠⠈⠄⠀⠀⠁⠀⠃⠀⠀⠠⠁⠀⠀⠀⠈⠀⡀⠀⠠⠀⠈⠀⠀⠀⠈⠀⠀⢀⠠⠈⠀⠀⢀⠀⠂⠄⠀⠀⠂⠁⠄⠀⢀⠀⠄⠁⠀⠀⠠⠀⠀⠀⠐⠀⠁⡀⠀⡀⠐⠈⠀⠀⠀⠀
// // ⡐⠂⠄⠀⠀⠐⡀⠀⠀⠠⠐⡀⠀⠀⢀⠠⠐⠀⠀⠀⡐⠀⠀⠀⠂⡈⠄⠀⠀⢀⠂⡀⠀⠀⠈⡀⠀⠀⢀⠀⢂⠀⠀⢀⠐⢈⠀⠀⠀⠌⡀⠀⠀⢀⠁⡀⠀⠀⠀⡁⠄⠀⠀⡐⠀⠀⠀⠐⢀⢀⠀⠀⠀⠠⠁⠀⠀⢀⠠⢀⠀⠀⠀⡐⠠⠀⠀⠂⡀⠁⠀⠀⢀⠂⡀⠀⠀⠀⠄⡁⠀
// // ⠀⢀⠀⠂⠐⠀⠀⠄⠂⠀⠀⠀⠀⠄⠂⠀⠀⠀⠂⠀⠀⠀⠐⠀⠀⠀⠐⠀⠐⠀⠀⠀⠠⠀⠀⠀⠀⠂⠀⠀⠀⠀⠂⠄⠀⠀⠀⠄⠀⠀⠀⠀⠂⠀⠀⠀⠐⠈⠀⠀⠀⠐⠀⠀⠀⠂⠐⠀⠀⠀⠀⠂⠁⠀⠀⠂⠐⠀⠀⠀⠀⠄⠁⠀⠀⠄⠂⠀⠀⠠⠐⠈⠀⠀⠀⠠⠈⠀⠀⠠⠀





// #include <bits/stdc++.h>

// #include <iostream>
// #define ll long long
// #define lld long double
// #define pb push_back
// #define py cout << 'Y'<<'E'<<'S'<<endl;
// #define pn cout << 'N'<<'O'<<endl;
// #define pii pair<ll,ll>
// #define pdd pair<lld,lld>
// #define all(v) v.begin(), v.end()
// #define Meyank ios_base::sync_with_stdio(false);
// #define Garg cin.tie(NULL);
// #define huehue cout.tie(NULL);
// #define max_heap(datatype) priority_queue<datatype>
// #define min_heap(datatype) priority_queue<datatype, vector<idatatypent>, greater<datatype> >
// using namespace std;
// int modulo = 1e9+7;
// ll gcd(ll a, ll b) {
//     if (b == 0) return a;
//     return gcd(b, a % b);
// }
// ll lcm(ll a, ll b) { return (a / gcd(a, b) * b); }
// bool sorta(const pii &a, const pii &b) { return (a.second < b.second); }
// bool sortd(const pii &a, const pii &b) { return (a.second > b.second); }
// string decToBinary(int n) {
//     string s = "" ;
//     int i = 0;
//     while (n > 0) {
//         s = to_string(n % 2) + s;
//         n = n / 2;
//         i++;
//     }
//     return s;
// }
// ll binaryToDecimal(string n) {
//     string num = n;
//     ll dec_value = 0;
//     int base = 1;
//     int len = num.length();
//     for (int i = len - 1; i >= 0; i--) {
//         if (num[i] == '1') dec_value += base;
//         base = base * 2;
//     }
//     return dec_value;
// }
// bool isPrime(int n) {
//     if (n <= 1) return false;
//     if (n <= 3) return true;
//     if (n % 2 == 0 || n % 3 == 0) return false;
//     for (int i = 5; i * i <= n; i = i + 6)
//         if (n % i == 0 || n % (i + 2) == 0) return false;
//     return true;
// }
// bool isPowerOfTwo(int n) {
//     if (n == 0) return false;
//     return (ceil(log2(n)) == floor(log2(n)));
// }
// bool isPerfectSquare(ll x) {
//     if (x >= 0) {
//         ll sr = sqrt(x);
//         return (sr * sr == x);
//     }
//     return false;
// }
//   long long moduloMultiplication(long long a, long long b, long long mod)
//   {
//       long long res = 0;
//       a %= mod;
  
//       while (b)
//       {
  
//           if (b & 1)
//               res = (res + a) % mod;
  
//           a = (2 * a) % mod;
  
//           b >>= 1; // b = b / 2
//       }
  
//       return res;
//   }
// ll powermod(ll x, ll y, ll p) {
//     ll res = 1;
//     x = x % p;
//     if (x == 0) return 0;
//     while (y > 0) {
//         if (y & 1) res = (res * x) % p;
//         y = y >> 1;
//         x = (x * x) % p;
//     }
//     return res;
// }


// ll bs_sqrt(ll x)
// {
//     ll left = 0, right = 2000000123;
//     while (right > left)
//     {
//         ll mid = (left + right) / 2;

//         if (mid * mid > x)
//             right = mid;
//         else
//             left = mid + 1;
//     }
//     return left - 1;
// }


  
//   ll modular_inverse(ll n, ll mod)
//   {
//       return powermod(n, mod - 2, mod);
//   }
  
//   ll nCr(ll n, ll r, ll p)
//   {
//       // If n<r, then nCr should return 0
//       if (n < r)
//           return 0;
//       // Base case
//       if (r == 0)
//           return 1;
  
//       // Fill factorial array so that we
//       // can find all factorial of r, n
//       // and n-r
//       unsigned long long fac[n + 1];
//       fac[0] = 1;
//       for (int i = 1; i <= n; i++)
//           fac[i] = (fac[i - 1] * i) % p;
  
//       return (fac[n] * modular_inverse(fac[r], p) % p * modular_inverse(fac[n - r], p) % p) % p;
//   }
  
// int modFact(int n, int p)
// {
//     if (n >= p)
//         return 0;

//     int result = 1;
//     for (int i = 1; i <= n; i++)
//         result = (result * i) % p;

//     return result;
// }

// void print_heap(max_heap(pii) v){
//     while (v.empty()==false){
//         cout<<"( ";
//         cout<<v.top().first<<" "<<v.top().second<<" ) ";
//         v.pop();
//     }
//     cout<<endl; 
    
    
// }



// bool check_if_possible(max_heap(pii) color_freq,int n,int k,int m){

//     int max_freq=(n+k-1)/k;
//     int freq_max_freq=n%k;
//     if(n%k==0){
//         freq_max_freq=k;

//     }
//     // else{
//     //     freq_max_freq=n/k + 1;
//     // }

//     if(color_freq.top().first>max_freq){
//         return false;
//     }
//     int count=0;

//     while(!color_freq.empty() && color_freq.top().first==max_freq){
//         count++;
//         color_freq.pop();

//     }
//     // cout<<count<<" "<<freq_max_freq<<endl;;





//     return count<=freq_max_freq;

    


   



// }
// int main() {
//     Meyank Garg huehue;
//     ll t;
//     cin >> t;
//     while (t--) {
//         int n,m,k;
//         cin>>n>>m>>k;
//         // vector<int>nums(m);
//         // for(int i=0;i<m;i++){
//         //     cin>>nums[i];
//         // }
//         max_heap(pii) color_freq;
//         for(int i=0;i<m;i++){
//             int x;
//             cin>>x;
//             color_freq.push({x,i+1});
//         }

//         if(check_if_possible(color_freq,n,k,m)){
//             py;
//         }else{
//             pn;
//         }


       
       
//     }
//     return 0;
// }





// ⠈⠀⠈⠀⠀⠀⠀⠀⠠⠀⠀⠀⠀⠄⡀⠀⠀⠀⠄⠀⠀⠀⠠⠀⠀⠀⠀⠀⠄⠀⠀⠀⠠⠀⠀⠀⠀⠄⠀⠀⠀⠀⠄⠀⠀⠀⠠⠀⠀⠀⠀⠀⠄⠀⠀⠀⠄⠠⠀⠀⠀⠠⠀⠀⠀⠀⠄⠀⠀⠀⠀⠄⠀⠀⠀⠀⠄⠀⠀⠀⠀⠄⠀⠀⠀⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠀⠀⠀⠀⡄
// ⠄⠂⡀⠁⠈⠀⡀⠀⠁⠠⢀⠀⠀⠀⠀⢀⠠⠀⠈⠄⠠⠀⠀⠁⠠⢀⠂⠈⠀⠀⠂⠀⠀⠀⠐⡀⠈⠀⠡⠀⠄⠀⠀⠁⠐⢀⠀⠁⠀⢂⠀⠀⠀⠄⢂⠀⠀⠁⠀⠄⠂⠀⠀⠄⡀⠈⠀⠐⢀⠂⠀⠈⠀⠐⡀⠈⠀⠁⠐⠀⠀⠀⠁⠠⢀⠀⠁⠀⠠⠈⠈⠀⠀⠂⡀⠁⠀⠀⠀⠂⠄
// ⠃⠀⢀⠀⢀⠀⠀⠀⢀⠀⠀⠀⠀⡀⠄⠀⠀⠀⡀⠀⠐⠀⢀⠀⠁⠀⢀⠀⢀⠀⠂⠁⢀⠠⠀⠀⠀⠀⡀⠀⠐⠀⡀⠀⠐⠀⠀⠀⠀⠀⠀⢀⠀⠀⠂⠀⠀⢀⠀⠀⠂⢀⠀⠀⠀⠀⠀⠈⠀⠀⠀⡀⠄⠐⠀⠀⠀⡀⠀⠈⠀⡀⠄⠐⠀⠀⠀⠁⠀⢀⠀⠀⠀⠂⠀⢀⠠⠀⠈⠀⠀
// ⢂⠀⡀⠘⠀⠀⠀⠀⠀⢀⠀⠀⠀⠀⢀⠠⢀⠀⠀⠀⢀⠐⠀⠂⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⢀⠀⠂⠁⠀⠀⠀⠀⡀⠀⠈⠀⠀⠀⠀⡀⠀⠀⠄⠀⡀⠁⠂⠀⠀⠀⠀⠠⠀⠀⠀⠁⠀⠀⠀⠀⠀⠀⠀⢀⠀⠁⡀⠀⠀⠀⠐⠀⠀⠀⠀⠈⠀⠀⠈⠀
// ⠄⠐⢀⠀⠀⠁⠂⠀⠀⣀⣤⣶⣶⣶⣦⣤⣈⠀⠀⠀⠂⠀⠀⢀⠁⠌⢀⠀⠀⠂⠁⠄⠀⠀⠁⠁⡀⠀⠈⠄⠁⠀⡀⠀⠡⠀⠀⡀⠠⠁⠄⠀⠀⠠⠁⢂⠀⠀⠄⠁⠀⠀⠀⠈⠀⠀⠀⠐⠈⠐⠀⡀⠀⠈⠀⡀⢀⠈⠐⠈⠀⠀⡀⠁⢀⣠⣤⣶⣶⣦⣤⣀⠠⠁⠂⠀⢀⠈⠄⠁⠀
// ⠀⠀⢀⠈⡐⠀⠀⣀⣾⡿⠋⠁⠀⠀⠈⠉⠻⣷⡄⠀⠀⠠⢈⠀⠀⠀⠠⢀⢂⠀⠀⠀⡈⠠⠀⠀⠄⡈⠀⠀⠀⠄⡀⡁⠀⠀⠐⠀⠀⠀⠀⡀⠂⠀⠀⠀⠀⠌⠀⠀⠀⡈⠀⠀⠀⢁⠈⡀⠀⠀⡀⢀⠁⠀⠀⠄⢂⠀⠀⠀⢀⠂⢀⣴⡿⠋⠉⠀⠀⠈⠉⠻⣷⣄⠀⢂⢈⠀⠀⠐⠀
// ⠅⠈⠄⠀⠀⠀⢠⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⡄⠄⠀⠀⠀⠁⠄⠀⠀⠀⠀⠄⡁⠀⠀⠀⠂⠀⠀⢀⠐⠠⠀⠀⢀⣀⣬⣤⣤⣤⣶⣴⣤⣤⣤⣤⣄⣀⣀⠂⠄⠁⠀⠀⠁⠌⠀⠀⢀⠈⠄⠀⠀⠈⠠⠁⠀⠀⠠⠈⠄⠀⠀⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⡆⠀⠀⠀⠠⠀⠀
// ⠁⠈⠀⠠⢀⣈⣸⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣹⡏⠀⠐⢀⠀⠈⠀⠡⠀⠠⠀⠀⠀⢀⠀⠁⠈⡀⠄⣀⣬⣴⣾⠿⠿⢛⠫⠍⠭⣉⠒⡌⢢⠉⡍⢫⠙⣛⠻⠿⢷⣶⣤⣀⠈⠀⠀⠀⠀⠈⠀⠀⠄⠂⠁⠈⠀⢀⠀⠈⠀⢀⢸⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣹⣗⣀⣀⠈⠀⢀⠀
// ⠀⢀⣰⣾⠿⠛⠋⠙⠂⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⠇⠀⠀⠂⠐⠀⠀⠀⠀⠂⠀⡀⠀⠂⠀⠀⣠⣴⡿⢟⠫⡑⢢⠉⢆⢃⠎⡙⢌⡑⡋⢔⠡⢊⠔⡡⢃⠆⢣⠜⡂⢍⡙⠻⢿⣶⣄⡐⠀⠀⠀⠀⠂⠀⢀⠀⠐⠀⠀⠀⠀⠀⠈⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠋⠉⠛⠻⢷⣦⡀⠀
// ⠀⣾⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⣿⣏⠀⠈⢀⠀⠀⠀⠁⢂⠀⠀⠀⠀⠁⢀⣴⡿⢟⠩⡐⢡⢂⡑⢢⢉⠲⡌⢆⠱⡈⠔⡩⠌⡌⡡⢎⡱⢡⠊⡔⢨⠘⠤⣈⢑⠢⢌⠛⣿⣶⣄⠈⠀⠀⡀⠀⠀⡀⠀⠈⠀⠈⠀⠀⣘⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⡄
// ⢸⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⢿⣦⡀⠐⠀⢀⠀⠠⠐⠈⠀⢠⣼⡿⢋⠜⡠⢃⣼⣶⡆⠜⡠⡉⢖⡩⢎⡒⡅⢣⠐⡡⢂⠱⡌⢲⢡⠓⣌⠡⢊⡒⠥⢊⠜⡠⢃⠔⡨⢻⣷⣄⠁⠀⠀⣀⠠⠁⠂⠀⠀⣤⣾⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣷
// ⢸⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣦⡀⠂⢀⠀⠀⢀⣼⡿⢋⠄⢣⢘⣴⣿⡿⠫⣬⣿⣶⠡⢂⠱⣈⠜⡼⡡⢎⠱⣨⠱⢌⠣⢎⡹⢄⢣⠃⣌⣦⡑⢌⠰⢿⣿⣦⡡⢊⠿⣷⣄⠀⠀⠀⠀⢀⣰⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⡟
// ⠀⢻⣷⡄⠀⠀⠀⠀⠀⠀⣠⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣦⣀⠰⣠⣿⠏⡜⢠⠚⣴⣿⡿⢋⢔⣽⣿⢟⠡⢃⣾⣷⡌⠢⣝⠳⣌⠳⡄⢋⡌⠳⢌⡓⢮⡑⢎⠹⣿⣷⣌⠆⡡⢛⢿⣿⣆⢌⡙⣿⣦⠀⢀⣴⡾⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣆⠀⠀⠀⠀⠀⠀⢀⣴⡿⠁
// ⠀⠈⠻⢷⣦⣄⣀⣀⣠⣴⡿⢻⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⢿⣦⣿⢫⠐⡡⢊⣴⣿⠿⡁⢎⣾⣿⠟⡈⢦⣾⣿⠟⡡⢂⡙⢆⡙⢢⠑⣊⠑⢢⠘⡱⢈⠓⡜⢠⠙⣿⣿⣔⠡⢊⠜⢿⣿⣎⢡⠙⣿⣦⣾⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⡿⠿⣶⣤⣀⣀⣀⣤⣾⠟⠁⠀
// ⠀⠄⠀⠀⠈⠉⠿⠛⠉⠉⠀⠀⠉⠻⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⢃⠆⡑⢢⠡⢌⠋⡔⢡⠚⡛⠧⡘⠰⡙⢟⠱⣈⠒⡡⠘⠤⡘⢄⠣⢄⠋⢆⠓⡐⢣⠘⡄⢣⠘⡌⣛⠋⢆⠱⡈⢆⡛⣛⠢⡉⠜⢿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣶⡿⠋⢀⠀⠈⠉⠙⠟⠋⢉⠀⠠⢄⠀
// ⡀⠀⢀⠡⠈⠀⠀⠀⠐⢀⠀⠀⠀⠀⠈⠻⣷⣦⡀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⣠⣾⠟⠋⠀⠀⠸⠀⠀⠀⠀⠀⠐⠸⠀⠀⠘⠀
// ⡄⠁⠂⠀⠀⠀⠂⠀⠀⠠⠐⠀⠀⠀⢀⠠⠀⠙⢿⣦⡀⠀⠀⠀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⣠⣾⠟⠁⠀⠀⠆⠀⠀⠀⠀⠄⠂⡁⠀⠀⠀⠐⠀⠀
// ⠄⠀⢈⠠⠁⠀⠀⠀⠡⠀⠀⠀⠁⠌⠀⠀⠀⠀⠀⠙⢿⣦⡀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⢀⣴⣾⠟⡁⠀⠀⠠⠀⠀⠀⠈⠠⠈⠀⠀⠀⠄⢨⠀⠀⠐⠀
// ⢂⠄⠂⠀⠈⠀⠀⠀⠁⢠⠀⠐⠀⠈⠀⠀⠰⠀⠁⠀⠀⠙⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠄⠀⠀⠀⠈⠀⡀⠄⠈⠀⠀⠀⡀⠀
// ⠂⠈⢀⠀⢀⠂⠁⡀⠀⣴⣾⠿⠿⡿⠿⡿⢿⠿⠿⡿⢿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⡿⢿⠿⡿⠿⢿⠿⡿⢷⣦⡐⠀⠂⠀⢀⠀⠂⠀⠀
// ⡀⠀⠠⠈⠀⠀⠀⠄⢸⣿⠂⣍⢢⢁⠳⡈⠆⠬⡑⢄⠣⢌⡩⣘⠩⡘⢄⠣⡘⡄⢣⠘⡌⠥⢋⠔⡡⢊⠔⣡⠊⡔⢩⡘⢅⠣⡘⢄⠣⠜⡠⢃⡌⠣⢍⠒⡡⢊⠔⡡⢊⡔⠡⡍⢎⠱⡈⢆⠱⡈⢆⠱⣈⠥⣉⠆⡩⢌⠡⠍⡌⢱⢈⠆⠳⡈⠕⡈⢆⠱⡈⢽⣿⠀⠀⠁⠈⠀⠀⠈⠀
// ⠄⠁⠂⠀⠀⠈⠀⡀⠈⢿⣷⣤⣦⣬⣦⣵⣬⣦⣵⣬⣶⣤⣶⣤⣧⣼⣤⣧⣴⣬⣦⣵⣬⣦⣥⣮⣴⣥⣮⣤⣵⣬⣦⣼⣤⣧⣼⣤⣧⣼⣤⣧⣬⣵⣬⣦⣵⣬⣦⣵⣦⣬⣵⣴⣬⣦⣵⣬⣦⣵⣬⣶⣤⣶⣤⣮⣴⣬⣦⣵⣬⣦⣬⣬⣵⣬⣼⣴⣬⣦⣵⡿⠋⠀⠂⠀⠀⠀⠂⠁⠀
// ⠂⠀⠈⡐⠈⠀⠀⠀⠄⠀⠀⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠩⠉⣿⡏⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⣉⣉⣉⡉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⣉⣉⣉⡉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⢉⣿⠏⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⢁⠀⠀⠀⠀⠂⢘⠀⠀⠐⠀
// ⠅⠂⠄⠀⠀⠀⠄⠀⠀⠠⠀⠄⠀⠀⠀⠠⢰⠀⠀⠀⠄⠀⠀⢹⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣾⣿⣿⣿⣿⣿⣷⣦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣶⣿⣿⣿⣿⣿⣿⣶⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡿⠂⠠⠀⠀⠀⠄⢀⠀⠀⠂⠀⠄⠀⠀⠀⠌⠀⠀⠀⠀⠠⠀⠀
// ⠁⠈⢀⠠⠐⠀⠀⠄⠀⡀⠀⠀⠂⡀⠌⠀⠀⠀⡀⠀⠈⠀⢀⠸⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⡀⠀⠀⠀⠀⠀⠀⠀⢰⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡄⠀⠀⠀⠀⠀⠀⢀⣿⡇⠀⠈⠀⡀⠂⠈⠀⢀⠀⠀⠈⠀⠠⠐⠀⠀⠁⢀⠰⠀⠀⠠⠀
// ⠄⡀⠄⠀⠂⠀⡀⠀⠁⠀⢀⠠⠀⠐⠀⠀⢠⠐⠀⠀⠀⠀⠂⠀⠸⣿⡄⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⣼⡟⠂⠀⠀⠐⠀⠁⢀⠀⠀⠂⡀⠀⠈⠐⠐⠀⠀⠌⠀⠐⠀⠀⠄⠀
// ⠐⠠⠀⢀⠀⠂⠄⠀⠀⠈⠠⠀⠀⠀⠠⠡⠀⠀⠀⠂⠡⢀⠀⠀⠀⠹⣷⡀⠀⠀⠀⠀⠀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⣼⡿⠀⠀⠌⠈⠀⠀⠠⠀⠐⠀⠀⠀⠌⠀⢀⠀⠠⠁⠂⠀⢀⠀⠡⠀⠀
// ⡁⠀⠐⠠⠐⠀⠀⠀⠈⠀⠀⠀⠈⡀⠁⠀⠀⠀⡁⠀⠀⠀⡐⠀⠀⠀⠹⣿⣄⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀⢀⣼⡟⠁⠀⠀⠀⠀⠀⡁⠂⠀⠀⢈⠀⠀⠀⠈⠀⡀⠀⠀⠐⠈⠠⠀⠀⠐⠀
// ⡁⠂⠄⠀⠀⠀⠄⠀⠀⠐⠠⠀⠀⠀⢀⠠⠘⠀⠀⠀⢂⠀⠀⠀⠂⠀⠀⠙⢿⣦⡀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠁⠀⠀⠀⠀⠀⠀⠀⠘⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠃⠀⠀⣠⣾⠟⠀⠀⠀⠐⠀⢂⠀⠀⠀⠐⠀⠀⠀⠁⠀⠂⠀⠀⠀⠂⠄⠀⠀⠀⠀⠂⠀
// ⠀⠀⠐⢈⠐⠀⠀⠀⠄⠁⠀⠀⠀⠡⠀⠀⠀⠀⠄⠀⠀⠀⠠⠁⠀⠀⠰⠀⠈⠻⣷⣄⠀⠀⠀⠈⠛⢿⣿⣿⣿⣿⣿⡿⠟⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠿⣿⣿⣿⣿⣿⣿⠿⠋⠀⠀⢀⣴⡿⠁⠀⠀⠄⠈⡀⠀⠀⠀⠄⠂⠀⠀⠁⠄⠀⠀⠠⠀⠄⠀⠀⠠⢀⠰⠀⠀⠐⠀
// ⢂⠐⡈⠀⠀⡀⠄⠀⠀⠁⢀⠂⠁⠀⠁⠠⢐⠀⠈⠀⠐⠀⠁⠀⠄⠠⠈⠀⠀⠀⠘⠿⣷⣄⠀⠀⠀⠀⠀⠈⠉⠁⠀⠀⠀⠀⠀⠀⣠⣤⣶⣤⣄⡀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠀⠀⠀⠀⢀⣴⡿⠋⠀⠀⢂⠀⠀⠀⠐⠀⠠⠀⠀⠁⠐⢀⠈⠀⠄⡀⠀⠈⠀⠀⠂⠄⠀⠀⢀⠀⠄⠀
// ⠂⠐⠀⡀⠠⠀⠂⠀⠠⠐⠀⠐⠀⡀⠌⠀⠀⠀⡀⠀⠁⢀⠠⠀⠂⠐⠀⠀⠀⠂⠀⠀⠈⠻⢿⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣾⠟⠋⠀⠀⠀⡄⠂⠀⢀⠀⠐⠈⠐⠀⠀⠄⠈⠀⠀⠠⠀⠐⠠⠀⠀⠂⠁⠂⢀⠠⠀⠂⢀⠀
// ⡂⠀⠐⠠⠐⠀⠀⠠⠐⠀⠀⠀⠄⠀⠂⠀⢀⠠⠀⠀⠀⠀⠄⠁⡀⠀⠈⠄⠡⠀⠀⠀⢠⣴⡿⢫⣿⢿⣦⣤⣀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⣀⣠⣴⡿⢿⣟⠿⣶⣄⠀⠠⠁⠀⠀⠀⠠⠈⠄⠀⠀⠀⠁⠂⠀⠀⠡⠄⠀⠀⠠⠈⠄⠀⠀⠀⠂⠐⠀⠀⠀⠠
// ⠆⠁⠂⠀⠀⠀⠂⠀⠀⠀⢈⠀⠀⠀⠀⠐⠈⠀⠀⠀⢈⠀⠀⠀⠀⡀⠀⠀⠀⠀⣢⣴⡿⠋⢠⣿⠏⠀⠈⠙⠛⠿⢷⣶⣤⣤⣄⣀⣀⣀⣀⣀⣀⣀⣀⣤⣤⣶⣶⠿⠟⠋⠉⠀⠘⣿⣆⠈⠻⣷⣄⡀⠀⠀⠂⠀⠀⠠⠐⠈⠀⠀⠀⢈⠀⠀⠀⠂⢀⠀⠀⠀⠀⡁⠂⠀⠀⠀⠠⠁⠀
// ⠄⠀⠐⢈⠐⠀⠀⠀⠐⠀⠀⠀⠀⠂⠄⠀⠀⠀⡐⠀⠀⠀⠂⠄⠀⠀⢈⠀⣠⣾⠟⠉⠀⠀⣾⡏⠀⠀⠀⠀⠀⠀⣿⡇⠈⠉⠉⠛⠛⠛⣿⡟⠛⠛⠋⠉⠉⠘⣿⡄⠀⠀⠀⠀⠀⠘⣿⡄⠀⠈⠻⣿⣄⡀⠀⠄⠀⠂⠀⠀⠀⠂⡁⠀⠀⠐⡀⠀⠀⠀⠠⠀⠀⠀⠀⠄⠘⠀⠀⠠⠀
// ⠐⠀⠂⠀⠀⡀⠆⠀⠀⠐⠀⠂⠀⠀⠠⠠⢐⠀⠀⠀⡐⠀⠀⠀⡀⠄⣠⣾⠟⠁⠀⠀⠀⢸⣿⢿⣦⣄⡀⠀⠀⠀⣿⡷⠀⠀⠀⠀⠀⠀⣿⡇⠀⠀⠀⠀⠀⠀⣿⡇⠀⠀⠀⣀⣴⡾⢿⣷⠀⠀⠀⠈⠙⢿⣦⡀⠀⠠⠀⠐⠀⠀⠀⠠⠐⠀⠀⠂⠄⡀⠀⠀⢀⠂⠄⠀⢀⠠⠀⠄⠀
// ⠁⠀⠁⠄⠂⠀⠀⠀⡀⠂⠈⠀⠂⡐⡀⠀⠀⠀⠀⠀⠀⠠⠀⢀⣴⣾⠟⠁⠀⠀⠀⠀⠀⣿⡏⠀⠈⠙⠻⢷⣶⣴⣿⣄⣀⣀⡀⠀⠀⠀⣿⡇⠀⠀⣀⣀⣀⣀⣿⣧⣴⡾⠿⠛⠉⠀⠘⣿⡀⠀⠀⠀⠀⠀⠙⢿⣦⡀⠀⠈⠀⠀⡆⠀⠀⢀⠀⠁⠀⢀⠐⠀⠀⠀⠐⡀⢠⠀⠈⢀⠀
// ⠄⡀⠌⠐⠈⠀⠀⠀⠐⠀⢀⠀⠀⣀⣡⣤⣤⣌⣀⠀⠀⢀⣴⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀⣿⡇⠀⠀⠀⠀⠀⠀⢸⣿⠙⠛⠛⠛⠻⠻⠟⣿⡿⠛⠟⠛⠛⠛⠛⢹⣿⠁⠀⠀⠀⠀⠀⠀⣿⡇⠀⠀⠀⠀⠀⠀⠀⠙⠿⣦⣄⠀⠁⢀⣠⣤⣤⣄⣀⠀⠀⠂⠐⠀⠀⠄⠐⠀⠀⠀⠀⠀
// ⠅⠀⢂⠀⠀⠠⠁⠀⠀⠀⠀⣴⣿⠟⠋⠉⠉⠉⠛⢿⣶⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣷⣥⡀⠀⠀⠀⠀⣼⡏⠀⠀⠀⠀⠀⠀⠀⣿⡇⠀⠀⠀⠀⠀⠀⢘⣿⠀⠀⠀⠀⠀⣠⣾⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣷⣾⠟⠋⠉⠉⠉⠛⢿⣦⡀⠀⠀⠁⠂⠀⢀⠀⠈⠀⠀
// ⠀⠀⠈⠐⠠⠀⠀⠀⠠⠀⣰⡿⠋⠀⠀⠀⠀⠀⠀⠈⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⡏⠻⣷⣤⣀⠀⠀⣿⡇⠀⠀⠀⠀⠀⠀⠀⣿⡇⠀⠀⠀⠀⠀⠀⠈⣿⡆⠀⢀⣠⣶⠿⠋⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠋⠀⠀⠀⠀⠀⠀⠈⢻⣷⡄⠀⠀⠀⠠⠘⠀⠀⠐⠀
// ⢁⠂⠌⠀⠀⠀⠄⠀⠁⢰⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⡟⠁⣿⡇⠀⠀⠉⠛⠿⢷⣿⣧⣤⣤⣀⣀⣀⣀⣀⣿⣇⣀⣀⣀⣠⣤⣤⣤⣿⣷⠿⠛⠋⠁⠀⢸⣿⠈⠻⢿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⡇⠀⡀⠄⠀⠀⢀⠀⠄⠀
// ⠀⠀⠠⢀⠠⠁⠀⠀⡀⢸⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣾⠟⠁⠀⠀⢻⣿⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠛⠛⠛⠛⠛⠛⠛⠛⠛⠋⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⣸⣿⠀⠀⠀⠹⢿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⡇⠀⠀⠀⡀⢠⠀⠈⢀⠀
// ⠄⠠⠀⠂⠀⠀⠄⠁⠐⠀⢻⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⢿⣏⠁⠀⠀⡀⠀⠘⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠧⠀⠀⠁⠀⠀⢹⣿⠆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⡿⠁⠀⠠⠐⠀⠀⠀⠀⠄⠀
// ⡁⠂⢁⠀⠀⠀⠂⠀⠀⠀⠀⠙⠿⣷⣤⣤⣤⡄⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⡧⠀⠁⠄⠀⠀⢹⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⡟⠈⠠⠁⠀⢀⢠⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⣤⣤⣤⣶⡿⠋⠀⠀⠀⠡⠄⠀⢀⠠⠈⠀⠀
// ⠀⠀⢀⠘⡀⠀⠀⠁⡐⠀⠀⠀⢀⡀⠍⢩⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⠀⠀⢀⠐⢨⠀⠹⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⡿⠁⡀⠀⠀⢀⢂⢾⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣏⠉⠁⠀⢰⢀⢂⠀⠀⠀⡐⠠⠀⠀⠐⠀
// ⠡⠈⠄⠀⠀⡀⠄⠀⠀⠀⠐⡀⠀⠀⠀⠀⢿⣧⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⠇⠀⠄⡀⠀⠀⠀⠀⠙⢿⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣾⠟⠀⠀⠐⠀⠠⠀⠀⠘⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⣠⣿⠃⠀⠂⠀⠀⠀⠀⠀⠄⠂⠀⠀⠀⠄⠂⠀
// ⠁⠈⠀⠄⢀⠀⠀⠂⡀⠀⠀⠀⡀⠄⡀⠀⠀⠻⣷⣤⣀⠀⠀⢀⣀⣴⡿⠋⢀⠀⠀⠀⢀⠀⠀⠁⠄⠀⠉⠻⢷⣦⣄⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣴⣶⠿⠋⠀⠀⠀⡀⠀⠈⠀⠀⡀⠆⠈⠿⣷⣄⣀⠀⠀⣀⣠⣴⡿⠃⠀⡀⠀⠁⠠⢀⠀⠀⠈⢀⠠⠐⠀⠀⠐⠀
// ⠂⠄⡀⠈⠀⠀⡀⠀⠐⠀⢀⠀⠀⠐⠀⠀⢠⠀⠈⠙⠛⠿⠿⠟⠛⠉⠀⠀⠀⠀⡀⠄⠂⠈⠀⡀⠀⠈⠀⢀⠀⠈⠉⠛⠻⠿⠿⠷⢶⣶⡶⣶⠶⠾⠿⠿⠟⠛⠋⠉⡄⠀⠀⠀⡀⠀⠐⠠⠀⡀⠀⠀⠀⠀⠀⠈⠙⠛⠿⠿⠛⠋⠁⠀⠀⠀⠀⠄⠀⠀⠀⠂⠀⡀⠀⠀⠈⠀⢀⠈⠀
// ⠃⠀⠠⠠⢀⠀⠀⠀⠀⠌⠀⠀⠠⠠⠐⠈⠈⠀⠀⠀⠀⢀⠀⠀⠀⠈⠀⠠⠀⠀⠀⠠⠀⠄⠐⠀⠀⠀⠈⠀⠀⠀⠠⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠠⠀⠀⠁⠃⠀⠄⠀⠀⠀⠄⠐⠀⠀⠀⠄⠄⠈⠀⠀⠀⠈⠀⠈⠀⠄⡀⠀⠈⠀⠄⠂⠁⠀⠠⠀⠀⠀⠡⠀⠠⠀⠀⢀⠀
// ⡁⢀⠠⠐⠀⠀⠀⠀⠈⠀⠀⢀⠠⠁⠄⠀⢀⠀⠡⠀⠀⠀⠈⠄⠀⠀⠈⠀⠡⠀⠀⡀⠈⠀⠀⠀⠠⠈⠄⠀⠀⠁⠀⠃⠀⠀⠠⠁⠀⠀⠀⠈⠀⡀⠀⠠⠀⠈⠀⠀⠀⠈⠀⠀⢀⠠⠈⠀⠀⢀⠀⠂⠄⠀⠀⠂⠁⠄⠀⢀⠀⠄⠁⠀⠀⠠⠀⠀⠀⠐⠀⠁⡀⠀⡀⠐⠈⠀⠀⠀⠀
// ⡐⠂⠄⠀⠀⠐⡀⠀⠀⠠⠐⡀⠀⠀⢀⠠⠐⠀⠀⠀⡐⠀⠀⠀⠂⡈⠄⠀⠀⢀⠂⡀⠀⠀⠈⡀⠀⠀⢀⠀⢂⠀⠀⢀⠐⢈⠀⠀⠀⠌⡀⠀⠀⢀⠁⡀⠀⠀⠀⡁⠄⠀⠀⡐⠀⠀⠀⠐⢀⢀⠀⠀⠀⠠⠁⠀⠀⢀⠠⢀⠀⠀⠀⡐⠠⠀⠀⠂⡀⠁⠀⠀⢀⠂⡀⠀⠀⠀⠄⡁⠀
// ⠀⢀⠀⠂⠐⠀⠀⠄⠂⠀⠀⠀⠀⠄⠂⠀⠀⠀⠂⠀⠀⠀⠐⠀⠀⠀⠐⠀⠐⠀⠀⠀⠠⠀⠀⠀⠀⠂⠀⠀⠀⠀⠂⠄⠀⠀⠀⠄⠀⠀⠀⠀⠂⠀⠀⠀⠐⠈⠀⠀⠀⠐⠀⠀⠀⠂⠐⠀⠀⠀⠀⠂⠁⠀⠀⠂⠐⠀⠀⠀⠀⠄⠁⠀⠀⠄⠂⠀⠀⠠⠐⠈⠀⠀⠀⠠⠈⠀⠀⠠⠀





#include <bits/stdc++.h>

#include <iostream>
#define ll long long
#define lld long double
#define pb push_back
#define py cout << 'Y'<<'E'<<'S'<<endl;
#define pn cout << 'N'<<'O'<<endl;
#define pii pair<ll,ll>
#define pdd pair<lld,lld>
#define all(v) v.begin(), v.end()
#define Meyank ios_base::sync_with_stdio(false);
#define Garg cin.tie(NULL);
#define huehue cout.tie(NULL);
#define max_heap(datatype) priority_queue<datatype>
#define min_heap(datatype) priority_queue<datatype, vector<idatatypent>, greater<datatype> >
using namespace std;
int modulo = 1e9+7;
ll gcd(ll a, ll b) {
    if (b == 0) return a;
    return gcd(b, a % b);
}
ll lcm(ll a, ll b) { return (a / gcd(a, b) * b); }
bool sorta(const pii &a, const pii &b) { return (a.second < b.second); }
bool sortd(const pii &a, const pii &b) { return (a.second > b.second); }
string decToBinary(int n) {
    string s = "" ;
    int i = 0;
    while (n > 0) {
        s = to_string(n % 2) + s;
        n = n / 2;
        i++;
    }
    return s;
}
ll binaryToDecimal(string n) {
    string num = n;
    ll dec_value = 0;
    int base = 1;
    int len = num.length();
    for (int i = len - 1; i >= 0; i--) {
        if (num[i] == '1') dec_value += base;
        base = base * 2;
    }
    return dec_value;
}
bool isPrime(int n) {
    if (n <= 1) return false;
    if (n <= 3) return true;
    if (n % 2 == 0 || n % 3 == 0) return false;
    for (int i = 5; i * i <= n; i = i + 6)
        if (n % i == 0 || n % (i + 2) == 0) return false;
    return true;
}
bool isPowerOfTwo(int n) {
    if (n == 0) return false;
    return (ceil(log2(n)) == floor(log2(n)));
}
bool isPerfectSquare(ll x) {
    if (x >= 0) {
        ll sr = sqrt(x);
        return (sr * sr == x);
    }
    return false;
}
  long long moduloMultiplication(long long a, long long b, long long mod)
  {
      long long res = 0;
      a %= mod;
  
      while (b)
      {
  
          if (b & 1)
              res = (res + a) % mod;
  
          a = (2 * a) % mod;
  
          b >>= 1; // b = b / 2
      }
  
      return res;
  }
ll powermod(ll x, ll y, ll p) {
    ll res = 1;
    x = x % p;
    if (x == 0) return 0;
    while (y > 0) {
        if (y & 1) res = (res * x) % p;
        y = y >> 1;
        x = (x * x) % p;
    }
    return res;
}


ll bs_sqrt(ll x)
{
    ll left = 0, right = 2000000123;
    while (right > left)
    {
        ll mid = (left + right) / 2;

        if (mid * mid > x)
            right = mid;
        else
            left = mid + 1;
    }
    return left - 1;
}


  
  ll modular_inverse(ll n, ll mod)
  {
      return powermod(n, mod - 2, mod);
  }
  
  ll nCr(ll n, ll r, ll p)
  {
      // If n<r, then nCr should return 0
      if (n < r)
          return 0;
      // Base case
      if (r == 0)
          return 1;
  
      // Fill factorial array so that we
      // can find all factorial of r, n
      // and n-r
      unsigned long long fac[n + 1];
      fac[0] = 1;
      for (int i = 1; i <= n; i++)
          fac[i] = (fac[i - 1] * i) % p;
  
      return (fac[n] * modular_inverse(fac[r], p) % p * modular_inverse(fac[n - r], p) % p) % p;
  }
  
int modFact(int n, int p)
{
    if (n >= p)
        return 0;

    int result = 1;
    for (int i = 1; i <= n; i++)
        result = (result * i) % p;

    return result;
}

void print_heap(max_heap(pii) v){
    while (v.empty()==false){
        cout<<"( ";
        cout<<v.top().first<<" "<<v.top().second<<" ) ";
        v.pop();
    }
    cout<<endl; 
    
    
}



bool check_if_possible(max_heap(pii) color_freq,int k){
    while(color_freq.size()>=k){
        vector<pii>temp(k);
        for(int i=0;i<k;i++){
            temp[i]=color_freq.top();
            color_freq.pop();

        }
        for(int i=0;i<k;i++){
            if(temp[i].first > 1){
                color_freq.push({temp[i].first-1,temp[i].second});
            }
            cout<<temp[i].second<<" ";
        }
        cout<<endl;
        // print_heap(color_freq);
    }

    return color_freq.size()==0;

    // vector<int>color
}
int main() {
    Meyank Garg huehue;
    ll t;
    cin >> t;
    while (t--) {
        int n,m,k;
        cin>>n>>m>>k;
        // vector<int>nums(m);
        // for(int i=0;i<m;i++){
        //     cin>>nums[i];
        // }
        max_heap(pii) color_freq;
        for(int i=0;i<m;i++){
            int x;
            cin>>x;
            color_freq.push({x,i+1});
        }

        if(check_if_possible(color_freq,k)){
            py;
        }else{
            pn;
        }


       
       
    }
    return 0;
}